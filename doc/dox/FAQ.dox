/**
\page FAQ Frequently Asked Questions

- Q: <em>Why are the Python bindings not built?</em>
  <br>
  <b>Short answer (most likely case)</b>: after running \c cmake, type “<tt>make update_bindings</tt>”.<br>
  <b>Long answer</b>: the bindings are automatically generated by a script. You may not have all dependencies correctly installed (or detected by cmake). Check \ref installation and \ref updating_python_bindings for details on installing dependencies and the individual steps involved in creating Python bindings, respectively.

- Q: <em>Why is the code I added to the OMPL source not being compiled?</em>
  <br>
  See \ref buildSystem. Essentially, just run \c cmake again after adding new files.

- Q: <em>How do I specify collision checking for a planner?</em>
  <br>
  A: See \ref stateValidation "state validation".

- Q: <em>Can I visualize the exploration datastructure used by a planner?</em>
  <br>
  A: Yes. You need to call ompl::base::Planner::getPlannerData(). This
  will give you an instance of ompl::base::PlannerData which contains
  all the states and the edges between them. Functionality for
  plotting this data is however not available.

- Q: <em>Can I change the state space during planning?</em>
  <br>
  A: No. Such changes will make the code crash.

- Q: <em>Can I set the sampler to use for a planner?</em>
  <br>
  A: Yes. The sampler instances used by planners are allocated by
  either ompl::base::SpaceInformation::allocStateSampler()
  (which calls ompl::base::StateSpace::allocStateSampler()
  under the hood) or by
  ompl::base::SpaceInformation::allocValidStateSampler().  By default,
  ompl::base::SpaceInformation::allocValidStateSampler() produces an
  instance of ompl::base::UniformValidStateSampler, unless a sampler
  allocator was specified. The simplest way to change which sampler is allocated is to specify a sampler allocator.
  Calling ompl::base::SpaceInformation::setValidStateSamplerAllocator() allows
  the user to do just that:
  @code
  #include "ompl/base/samplers/ObstacleBasedValidStateSampler.h"
  ...
  ompl::base::ValidStateSamplerPtr allocValidStateSampler(const ompl::base::SpaceInformation *si)
  {
        return ompl::base::ValidStateSamplerPtr(new ompl::base::ObstacleBasedValidStateSampler(si));
  }
  ...
  ompl::base::StateSpacePtr space(...);
  ompl::base::SpaceInformationPtr si(new ompl::base::SpaceInformation(space));
  si->setValidStateSamplerAllocator(boost::bind(&allocValidStateSampler, _1));
  // for simplified calls, you can also use:
  // si->setValidStateSamplerAllocator(&allocValidStateSampler);
  @endcode
  The example above is similarly applicable for ompl::base::StateSamplerAllocator ompl::control::ControlSamplerAllocator, ompl::control::DirectedControlSamplerAllocator and ompl::base::PlannerAllocator.
<br><br>
If your question is still not answered, another good place to check is
the <a href="http://sourceforge.net/mailarchive/forum.php?forum_name=ompl-users">mailing
list archive</a>.


*/
