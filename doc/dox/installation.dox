/**
\page installation Installation

If you use Linux or OS X, then all dependencies can be installed either through a package manager or by OMPL's build system. In other words, you probably don't have to compile dependencies from source.

To compile OMPL the following two packages are required:
- <a href="http://www.boost.org">Boost</a> (required version 1.40, recommended version 1.44 or higher) and
- <a href="http://www.cmake.org">CMake</a> (required version 2.8.2 or higher).
.

To be able to generate python bindings you need to install the
<a href="http://www.python.org">Python</a> library and header files.
<br>

\note If you are using <a href="http://code.ros.org">ROS</a>, please see the <a href="http://www.ros.org/wiki/ompl_ros_interface">ROS interface to OMPL</a>.

\htmlonly
<div class="btn-group">
  <a class="btn" href="#install_linux_ubuntu">Linux</a>
  <a class="btn" href="#install_mac_os">OS X</a>
  <a class="btn" href="#install_windows">Windows</a>
</div>
\endhtmlonly

\section install_linuxosx Installation on Linux

Below are installation instructions for Ubuntu Linux. Similar steps can be taken for other distributions, but package names may not be identical.

\subsection install_linux_ubuntu Ubuntu Linux

\subsubsection install_linux_ubuntu_deb Installation from repository
For Ubuntu 10.04 (lucid), 11.10 (oneiric) and 12.04 (precise), Willow Garage maintains deb packages for the latest version of OMPL. All you need to do is add the repository to your list of sources:
\code
sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu `lsb_release -sc` main" > /etc/apt/sources.list.d/ros-latest.list'
wget http://packages.ros.org/ros.key -O - | sudo apt-key add -
\endcode
and install OMPL:
\code
sudo apt-get update
sudo apt-get install ros-fuerte-ompl
\endcode

\subsubsection install_linux_ubuntu_src Installation from source
- If using Ubuntu 11.04 or earlier, the supplied Boost version is too old. Ubuntu 10.04 and newer do include Boost 1.40+, which is sufficient, but for the complete functionality
of OMPL (Python bindings and <a href="http://odeint.org">boost::numeric::odeint</a>), you will need Boost 1.44+.
You can install Boost from <a href="http://www.boost.org/users/download/">source</a>, but it is simpler to add another repository:
\code
sudo add-apt-repository ppa:boost-latest/ppa
\endcode
- The default version of CMake should suffice. If needed, you can download the latest version from <a href="http://www.cmake.org/cmake/resources/software.html">here</a>.
- Install Boost and CMake
\code
sudo apt-get install libboost-all-dev cmake
\endcode
Some versions of Linux offer multiple versions of Boost. It is strongly advised to install only one version.
- To be able to generate documentation, generate Python bindings, build the ODE extension, the following packages are also needed:
\code
sudo apt-get install doxygen graphviz python-dev libode-dev curl
\endcode
- Create a build directory and run cmake:
\code
cd ompl
mkdir -p build/Release
cd build/Release
cmake ../..
\endcode
- If you want Python bindings, type the following two commands:
\code
make installpyplusplus && cmake . # download & install Py++
make update_bindings
\endcode
- Compile OMPL by typing \c make.
- Optionally, run the test programs by typing <tt>make test</tt>.
- Optionally, generate documentation by typing <tt>make doc</tt>.
- If you need to install the library, you can type <tt>sudo make install</tt>. The install location is specified by <tt>CMAKE_INSTALL_PREFIX</tt>. If you install in a non-standard location, you have to set the environment variable PYTHONPATH to the directory where the OMPL python module is installed (e.g., $HOME/lib/python2.7/site-packages).
.

\subsection install_linux_fedora Fedora Linux

- Thanks to Rich Mattes, OMPL core is available as a package for Fedora:
\code
yum install ompl
\endcode
- Installation from source is also possible if dependencies listed above are installed.

\section install_mac_os Installation on Mac OS X

- It is easiest to install the dependencies through <a href="http://www.macports.org">MacPorts</a>, a package manager for OS X, so install MacPorts first.
- If you do not need to modify or see the source code of OMPL, then the easiest way to install OMPL is with the MacPorts \c port command:
\code
sudo port selfupdate
sudo port install boost +python27 \; install ompl +python27
\endcode
This is it. You are done. Demo programs can be found in \c /opt/local/share/ompl.
- If you downloaded the source distribution of OMPL, then you need to install the dependencies Boost, and CMake. Optionally, you can also install the Open Dynamics Engine, Py++, and the Python libraries and headers. If you have MacPorts installed, type the following:
\code
sudo port selfupdate
sudo port install boost +python27 \; install cmake ode py27-pyplusplus-devel
\endcode
If you omit the \c +python27 part, Boost.Python will not be installed, and the Python bindings for OMPL cannot be compiled.
- It is <b>very</b> important that you use the same installed version of Python for all dependencies and OMPL.app. If you are using MacPorts, then you <b>must</b> use the MacPorts version of python 2.7 (most likely installed in <tt>/opt/local/bin</tt>). To make this version the default python version, make sure <tt>/opt/local/bin</tt> appears before <tt>/usr/bin</tt> in your PATH. You can add a line like this to your <tt>${HOME}/.bash_profile</tt>:
\code
export PATH=/opt/local/bin:/opt/local/sbin:$PATH
\endcode
Next, execute the following command:
\code
sudo port select python python27
\endcode
You can check if the MacPorts-installed python 2.7 is the default one by typing the following command:
\code
ls -l `which python`
\endcode
- To be able to generate documentation, Doxygen is also needed:
\code
sudo port install doxygen
\endcode
- Create a build directory and run cmake:
\code
cd ompl
mkdir -p build/Release
cd build/Release
cmake ../..
\endcode
- If you want Python bindings, type the following command:
\code
make update_bindings
\endcode
If you do not have MacPorts installed, you need to precede this command by:
\code
make installpyplusplus && cmake . # download & install Py++
\endcode
- Compile OMPL by typing \c make.
- Optionally, run the test programs by typing <tt>make test</tt>.
- Optionally, generate documentation by typing <tt>make doc</tt>.
- If you need to install the library, you can type <tt>sudo make install</tt>. The install location is specified by <tt>CMAKE_INSTALL_PREFIX</tt>. If you install in a non-standard location, you have to set the environment variable PYTHONPATH to the directory where the OMPL python module is installed (e.g., $HOME/lib/python2.7/site-packages).
.


\section install_windows Installation on Windows

It is possible to run OMPL natively on Windows, although it must be stressed that
<b>extensive testing on Windows is not performed</b> at this time, and running OMPL
on Windows is considered experimental.  For best performance, the
<a href="http://www.mingw.org/">MinGW</a> compiler is recommended.  Visual Studio
can also be used to build the core OMPL library, but currently it is
not possible to generate the python bindings for OMPL with this compiler.
However, if the bindings are generated with MinGW, the bindings
can be compiled by Visual Studio with some minor tweaks to the code (not recommended,
unless you are an experienced Windows developer).


\subsection req-dependencies Required Dependencies
- <a href="http://www.cmake.org/">CMake</a>

- <a href="http://www.mingw.org/">MinGW</a> (recommended) or Visual Studio compiler

- Boost: OMPL requires <a href="http://www.boost.org/">Boost</a>, version 1.44 or greater.
It is recommended to make a complete Boost compilation from source.  If using Visual Studio, this
process can be automated using the <a href="http://www.boostpro.com/download">BoostPro</a> installer.
Once complete, set the environment variables <tt>BOOST_ROOT</tt> and <tt>BOOST_LIBRARYDIR</tt> to
the locations where Boost and its libraries are installed.  The default locations are <tt>C:\\Boost</tt> and
<tt>C:\\Boost\\lib</tt>.  Ensure that <tt>BOOST_LIBRARYDIR</tt> is also in the system PATH so
that any necessary Boost dlls are loaded properly at runtime.

\subsection opt-dependencies Optional Dependencies (Python bindings)
- A <b>32-bit</b> version of <a href="http://python.org/">Python</a> 2.7.  Ensure that this is installed
<b>before building Boost</b> so that Boost.Python is properly compiled.

- Ensure that Python is added to the system <tt>PATH</tt>.

- Py++: To generate the Python bindings, Py++ and its dependencies must be installed.
A batch file has been included to automate this process (analogous to the Linux/Mac
installation) that can be executed via cmake.  Instructions can be found
\ref installPyPlusPlus "here".  Note that this process assumes the MinGW compiler,
and installs gccxml to <tt>C:\\gccxml</tt>.  You will need to be in a shell with administrator
privileges to execute this batch file.  Once installed, it is recommended that
you open a new shell to realize the new environment settings.

\subsection windows-build Build
- Once the dependencies are installed, CMake can be used to generate MinGW makefiles or a Visual Studio solution
by specifying a specific GENERATOR:
\code
cd ompl
mkdir build
cd build
mkdir Release
cd Release
cmake -G "GENERATOR" ../.. [-DCMAKE_INSTALL_PREFIX=/path/to/install]
\endcode
The CMAKE_INSTALL_PREFIX variable is set to <tt>C:\\Program Files (x86)\\ompl</tt> by default.

\subsubsection mingw MinGW
- The CMake generator for MinGW is <tt>"MinGW Makefiles"</tt>
- To generate the python bindings (optional), execute the update_bindings make command before compiling:
\code
mingw32-make update_bindings
\endcode
<b>Note:</b> <tt>update_bindings</tt> is <i>never</i> run automatically. If you change any of the OMPL header files, you need to regenerate the bindings for the changes to be reflected in the Python modules. See also the \ref updating_python_bindings "more detailed documentation on generating python bindings".
- Use <tt>mingw32-make</tt> to build OMPL.
- If you wish to install OMPL, use the install command to copy the binaries, demo code,
and other resources to the cmake install prefix.  Note that you will need to be in a shell with administrator
privileges to install to the default directory.
\code
mingw32-make install
\endcode
- Make sure to add the install path's \\lib subdirectory to the PATH so that the DLLs are found when code
is loaded.

\subsubsection msvc Visual Studio
- The CMake generator for Visual Studio depends on the version of Visual Studio to generate a solution for.
The generator for VS 2010 is <tt>"Visual Studio 10"</tt>, and the generator for VS 2008 is <tt>"Visual Studio 9 2008"</tt>.
Consult the CMake documentation for other generators.
- Open ompl.sln and build the solution.  A static library will be created (ompl.lib)
to link your code against, as well as several demo programs.
- You can install OMPL by building the "INSTALL" project inside of the solution.  Note that this
will attempt to copy files to <tt>C:\\Program Files (x86)\\ompl</tt> (the default).  The installation will
fail unless Visual Studio is opened with administrator privileges, or a non-system install prefix is specified
when cmake is run.

*/
