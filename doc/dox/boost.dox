/** 
\page boost Boost Structures used in OMPL

<a href="http://www.boost.org">Boost</a> provides an extension to the C++ 
standard template library, supplying the user with many generic, cross-platform
concepts that are easily included in the developer's program.  For users that
are unfamiliar with Boost, this page will briefly describe the constructs from 
the Boost library used in OMPL.  This tutorial makes no attempt to
fully educate the user on the usage and API of the Boost library, only to give 
a high level overview of these components and why they were chosen for OMPL.
For further detail on Boost, please consult the extensive 
<a href="http://www.boost.org/doc/libs/1_44_0/">Boost documentation</a> 
directly.

\attention
OMPL requires Boost <b>version 1.44</b> or greater.

\section sharedPtr Shared Pointer (boost/shared_ptr.hpp)
The <a href="http://www.boost.org/doc/libs/1_44_0/libs/smart_ptr/
shared_ptr.htm">shared pointer from Boost</a> provides intelligent memory 
management for dynamically allocated objects created with the <i>new</i> 
command.  In short, the templated shared_ptr object will delete (free) the 
allocated memory when the pointer goes out of scope.  Since these pointers 
utilize <a href="http://en.wikipedia.org/wiki/Reference_counting">reference 
counting</a>, it is safe to pass them into functions or copy them; the object
referenced by the pointer will only be destroyed when the reference count 
goes to zero.

\code
class MyClass
{
   /* ... */
   void myClassMethod (void) { /* ... */ }
   /* ... */
};

void performComputation ()
{
    // Create an instance of MyClass using a shared_ptr
    boost::shared_ptr <MyClass> myClassPtr (new MyClass ());

    // Invoke methods on the object as normal
    myClassPtr->myClassMethod ();    

} // myClassPtr goes out of scope here.  The instance of MyClass will be deallocated at this point.
\endcode

In the example above, the function performComputation creates a new instance of
MyClass but instantiates it using a shared_ptr.  Once the object is created, 
the pointer can be used like normal (using -> or the * operators).  When the 
function has finished execution, the object does not have to be specifically 
deleted; the reference count on myClassPtr will decrement to zero when the 
shared_ptr goes out of scope, triggering the automatic destruction the MyClass 
object.

The shared_ptr is used in OMPL in nearly all instances where an object is 
created from the heap in order to mitigate memory leaks.  Most classes in OMPL 
already have a typedef for a shared_ptr object using the <i>ClassForward</i> 
macro.  For example, ompl::base::Planner utilizes the macro just before the 
class declaration:

\code
ClassForward(Planner);
\endcode

which when expanded creates a forward declaration of the class <i>Planner</i>,
and defines the type <i>PlannerPtr</i>:

\code
class Planner;
typedef boost::shared_ptr<Planner> PlannerPtr;
\endcode

\section function Function and Bind (boost/function.hpp and boost/bind.hpp)
<a href="http://www.boost.org/doc/libs/1_44_0/doc/html/function.html">Boost's 
Function library</a> provides a templated wrapper for function pointers and 
a generalized framework for <a href="http://en.wikipedia.org/wiki/Callback_
(computer_programming)">callbacks</a>.  It is very easy to encapsulate a 
function pointer into a single object using Boost.  Function objects are 
templated with the first argument being the return type for the function, and
subsequent arguments corresponding to the function's arguments.  For example, 
assume we have a function called <i>computeMin</i> that returns the minimum 
of two integers:

\code
int computeMin (int x, int y)
{
    return x < y ? x : y;
}
\endcode

We could create a function pointer called <i>minFuncPtr</i> to the 
<i>computeMin</i> function using C++ syntax like this:

\code
int (*minFuncPtr)(int, int) = computeMin;
\endcode

The same object type using Boost looks like this:

\code
// Using Boost's "portable" function syntax.  function2 indicates a function with 2 arguments.
boost::function2<int, int, int> minFuncPtr (computeMin);
\endcode

In addition to improved readability and flexibility, we can also take advantage
of the <a href="http://www.boost.org/doc/libs/1_44_0/libs/bind/bind.html">Bind 
library</a> from Boost to create function pointers to class members 
(not nearly as easy with standard C++ syntax), and fix one or more variables of 
our function pointer.  In a more complex example, assume we have the class 
Math:

\code
class Math
{
    /* ... */

    // Return the minimum of x and y.  If x or y is below a lower bound, 
    // return the lower bound instead.
    int boundedMin (int x, int y, int lowerBound = 0)
    {
	if (x > lowerBound && y > lowerBound)
            return (x < y) ? x : y;
        else
            return lowerBound;
    }

    /* ... */
};
\endcode

If we wanted to create standard C++ function pointer to 
<i>Math::boundedMin</i>, the code gets a little crazy:

\code
// Create a function pointer called minFuncPtr
int (Math::*minFuncPtr)(int, int, int);

// Assign the function pointer to the boundedMin method in the Math class.
minFuncPtr = &Math::boundedMin;
\endcode

Calling the boundedMin function through the function pointer we just created
is equally as obfuscated:

\code
// Create the Math object so that we have a method to invoke
Math math;

// Wait, what?
int theMin = (math.*minFuncPtr)(1, 2, 0);
\endcode

Note that the function pointer and the corresponding invocation had to 
include ALL arguments to the boundedMin method, even the default arguments.
Since the function pointer is a type, all of the arguments supplied to the 
function are part of the type and we cannot use the default value of 0 for 
the lowerBound argument.  We can get around all of this by using Boost 
Functions in conjunction with Boost's Bind library:

\code
// Create the Math object so that we have a method to invoke
Math math;

// Setup the Boost function pointer as a function that returns an int, and takes two integer arguments
boost::function2 <int, int, int> minFuncPtr;

// Initializing the function pointer to the boundedMin method of the math 
// instance, and binding the lowerBound argument to zero.
minFuncPtr = boost::bind (&Math::boundedMin, math, _1, _2, 0);

// Invoking the function.  Much better.
int theMin = minFuncPtr (1, 2);
\endcode

In a nutshell, boost::bind returns a function pointer to the method given in
the first argument, using the instance ("math") supplied in the second 
argument.  _1 and _2 indicate that the first and second arguments of the 
boundedMin function will be supplied when the function is called.  The 
zero is permanently bound to the function pointer as the third argument (the
default value for "lowerBound").

<a href="http://www.boost.org/doc/libs/1_44_0/doc/html/function.html">
boost::function</a> and <a href="http://www.boost.org/doc/libs/1_44_0/libs/
bind/bind.html">boost::bind</a> are used in OMPL whenever a callback function 
is used to invoke methods on a global function or specific instance.  These 
are used to improve readability of the code, as well as to simplify the use of
callback functions across object barriers.  Also, if an uninitialized 
Boost function pointer is accessed, a <i>bad_function_call</i> exception is 
thrown, which is far more desirable than attempting to debug the segmentation 
fault that would occur with a standard uninitialized C++ function pointer.

\section nonCopyable NonCopyable (boost/noncopyable.hpp)
Boost provides a base class called <a href="http://www.boost.org/doc/libs/
1_44_0/libs/utility/utility.htm#Class_noncopyable">noncopyable</a> that classes
can derive from in order to prevent them from being copied.  noncopyable has
a private copy constructor and assignment operator.  Therefore, classes 
deriving from noncopyable are prohibited from invoking these copy operations.
Fully utilizing noncopyable is as simple as:

\code
class MyClass : boost::noncopyable
{
   ...
};
\endcode

OMPL derives several classes from boost::noncopyable.  The rationale behind
this is that these classes should never be copied anyway, either because 
the copy mechanism is highly non-trivial, copying such an object would be
prohibitive in terms of memory, or both.

\section thread Thread (boost/thread.hpp)
OMPL is designed to be thread-safe, meaning that most of the common API is
reentrant (in general, any function marked as <i>const</i> is thread-safe).
However, since OMPL is not limited to a single operating system, the creation
and management of threads poses a complication since operating systems are free
to choose how a developer creates and manages threads.  Thankfully, Boost 
provides a cross-platform <a href="http://www.boost.org/doc/libs/1_44_0/doc/
html/thread.html">Threading library</a> to take care of the operating system
specific code behind the scenes.  boost::thread provides classes for threads 
and mutexes that allow for multi-threaded computing and synchronization.

It is very easy to create Threads in boost.  Simply create an object of type
boost::thread, and supply it the handle to a "callable" object, or function:

\code
void threadFunction (void) { ... }

// Threads start automatically on creation
boost::thread myThread (threadFunction);
// Wait until the thread has finished execution
myThread.join ();
\endcode
\code
void threadFunction (int someNumber, const char *aString) { ... }

// Create a thread for threadFunction, and pass in some parameters
boost::thread myThread (threadFunction, 42, "A good number");
\endcode
\code
// Create an object for the Thread to operate in.  Thread calls operator () to start.
struct ThreadStruct
{
    void operator () (int param1, const char *param2, const std::vector<double> &param3)
    {
        ...
    }
};

// Create threaded object.
ThreadStruct tStruct;
// Create Thread.  Pass in three parameters.
boost::thread myThread (tStruct, 1, "Two", std::vector <double> ());
\endcode

By using <a href="http://www.boost.org/doc/libs/1_44_0/doc/html/thread.html">
Boost thread</a>, OMPL is able to remain operating system independent in
multi-threaded applications, as long as the operating system employed by the
user is supported by Boost.
*/
